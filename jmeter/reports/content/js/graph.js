/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 407.0, "minX": 0.0, "maxY": 11062.0, "series": [{"data": [[0.0, 407.0], [0.1, 652.0], [0.2, 1798.0], [0.3, 2100.0], [0.4, 2365.0], [0.5, 2489.0], [0.6, 2578.0], [0.7, 2663.0], [0.8, 2757.0], [0.9, 2833.0], [1.0, 2944.0], [1.1, 3028.0], [1.2, 3065.0], [1.3, 3162.0], [1.4, 3221.0], [1.5, 3302.0], [1.6, 3328.0], [1.7, 3431.0], [1.8, 3468.0], [1.9, 3612.0], [2.0, 3687.0], [2.1, 3799.0], [2.2, 3832.0], [2.3, 3889.0], [2.4, 3971.0], [2.5, 4006.0], [2.6, 4052.0], [2.7, 4095.0], [2.8, 4123.0], [2.9, 4189.0], [3.0, 4241.0], [3.1, 4323.0], [3.2, 4347.0], [3.3, 4395.0], [3.4, 4432.0], [3.5, 4468.0], [3.6, 4536.0], [3.7, 4567.0], [3.8, 4622.0], [3.9, 4649.0], [4.0, 4675.0], [4.1, 4725.0], [4.2, 4760.0], [4.3, 4820.0], [4.4, 4846.0], [4.5, 4868.0], [4.6, 4919.0], [4.7, 4939.0], [4.8, 4971.0], [4.9, 5005.0], [5.0, 5058.0], [5.1, 5077.0], [5.2, 5102.0], [5.3, 5186.0], [5.4, 5226.0], [5.5, 5247.0], [5.6, 5267.0], [5.7, 5362.0], [5.8, 5397.0], [5.9, 5486.0], [6.0, 5539.0], [6.1, 5587.0], [6.2, 5613.0], [6.3, 5648.0], [6.4, 5669.0], [6.5, 5690.0], [6.6, 5701.0], [6.7, 5760.0], [6.8, 5795.0], [6.9, 5850.0], [7.0, 5870.0], [7.1, 5929.0], [7.2, 5962.0], [7.3, 6039.0], [7.4, 6041.0], [7.5, 6076.0], [7.6, 6150.0], [7.7, 6205.0], [7.8, 6228.0], [7.9, 6252.0], [8.0, 6287.0], [8.1, 6330.0], [8.2, 6359.0], [8.3, 6389.0], [8.4, 6430.0], [8.5, 6440.0], [8.6, 6487.0], [8.7, 6504.0], [8.8, 6527.0], [8.9, 6533.0], [9.0, 6548.0], [9.1, 6551.0], [9.2, 6578.0], [9.3, 6589.0], [9.4, 6599.0], [9.5, 6606.0], [9.6, 6617.0], [9.7, 6618.0], [9.8, 6629.0], [9.9, 6630.0], [10.0, 6642.0], [10.1, 6643.0], [10.2, 6652.0], [10.3, 6657.0], [10.4, 6659.0], [10.5, 6663.0], [10.6, 6671.0], [10.7, 6675.0], [10.8, 6680.0], [10.9, 6680.0], [11.0, 6688.0], [11.1, 6689.0], [11.2, 6692.0], [11.3, 6697.0], [11.4, 6700.0], [11.5, 6701.0], [11.6, 6703.0], [11.7, 6704.0], [11.8, 6714.0], [11.9, 6716.0], [12.0, 6720.0], [12.1, 6725.0], [12.2, 6726.0], [12.3, 6726.0], [12.4, 6735.0], [12.5, 6738.0], [12.6, 6747.0], [12.7, 6752.0], [12.8, 6757.0], [12.9, 6757.0], [13.0, 6767.0], [13.1, 6770.0], [13.2, 6772.0], [13.3, 6774.0], [13.4, 6777.0], [13.5, 6787.0], [13.6, 6791.0], [13.7, 6794.0], [13.8, 6795.0], [13.9, 6796.0], [14.0, 6797.0], [14.1, 6801.0], [14.2, 6808.0], [14.3, 6810.0], [14.4, 6813.0], [14.5, 6815.0], [14.6, 6816.0], [14.7, 6819.0], [14.8, 6820.0], [14.9, 6828.0], [15.0, 6831.0], [15.1, 6832.0], [15.2, 6834.0], [15.3, 6835.0], [15.4, 6839.0], [15.5, 6840.0], [15.6, 6841.0], [15.7, 6842.0], [15.8, 6846.0], [15.9, 6848.0], [16.0, 6849.0], [16.1, 6849.0], [16.2, 6852.0], [16.3, 6853.0], [16.4, 6855.0], [16.5, 6855.0], [16.6, 6857.0], [16.7, 6857.0], [16.8, 6858.0], [16.9, 6858.0], [17.0, 6861.0], [17.1, 6861.0], [17.2, 6862.0], [17.3, 6863.0], [17.4, 6866.0], [17.5, 6866.0], [17.6, 6868.0], [17.7, 6871.0], [17.8, 6872.0], [17.9, 6873.0], [18.0, 6875.0], [18.1, 6875.0], [18.2, 6878.0], [18.3, 6879.0], [18.4, 6880.0], [18.5, 6881.0], [18.6, 6882.0], [18.7, 6882.0], [18.8, 6884.0], [18.9, 6885.0], [19.0, 6886.0], [19.1, 6886.0], [19.2, 6888.0], [19.3, 6889.0], [19.4, 6892.0], [19.5, 6895.0], [19.6, 6897.0], [19.7, 6899.0], [19.8, 6901.0], [19.9, 6906.0], [20.0, 6909.0], [20.1, 6910.0], [20.2, 6911.0], [20.3, 6912.0], [20.4, 6915.0], [20.5, 6916.0], [20.6, 6921.0], [20.7, 6921.0], [20.8, 6923.0], [20.9, 6924.0], [21.0, 6926.0], [21.1, 6930.0], [21.2, 6931.0], [21.3, 6932.0], [21.4, 6937.0], [21.5, 6937.0], [21.6, 6941.0], [21.7, 6943.0], [21.8, 6948.0], [21.9, 6948.0], [22.0, 6950.0], [22.1, 6953.0], [22.2, 6959.0], [22.3, 6962.0], [22.4, 6964.0], [22.5, 6969.0], [22.6, 6971.0], [22.7, 6972.0], [22.8, 6974.0], [22.9, 6976.0], [23.0, 6977.0], [23.1, 6978.0], [23.2, 6980.0], [23.3, 6981.0], [23.4, 6982.0], [23.5, 6983.0], [23.6, 6986.0], [23.7, 6991.0], [23.8, 6995.0], [23.9, 6997.0], [24.0, 6998.0], [24.1, 7000.0], [24.2, 7001.0], [24.3, 7003.0], [24.4, 7004.0], [24.5, 7005.0], [24.6, 7006.0], [24.7, 7008.0], [24.8, 7013.0], [24.9, 7014.0], [25.0, 7020.0], [25.1, 7021.0], [25.2, 7025.0], [25.3, 7026.0], [25.4, 7027.0], [25.5, 7028.0], [25.6, 7029.0], [25.7, 7031.0], [25.8, 7033.0], [25.9, 7035.0], [26.0, 7039.0], [26.1, 7040.0], [26.2, 7045.0], [26.3, 7048.0], [26.4, 7049.0], [26.5, 7050.0], [26.6, 7052.0], [26.7, 7052.0], [26.8, 7056.0], [26.9, 7056.0], [27.0, 7058.0], [27.1, 7059.0], [27.2, 7060.0], [27.3, 7061.0], [27.4, 7064.0], [27.5, 7065.0], [27.6, 7068.0], [27.7, 7069.0], [27.8, 7072.0], [27.9, 7074.0], [28.0, 7075.0], [28.1, 7077.0], [28.2, 7077.0], [28.3, 7080.0], [28.4, 7081.0], [28.5, 7081.0], [28.6, 7083.0], [28.7, 7083.0], [28.8, 7085.0], [28.9, 7085.0], [29.0, 7087.0], [29.1, 7088.0], [29.2, 7089.0], [29.3, 7092.0], [29.4, 7093.0], [29.5, 7095.0], [29.6, 7096.0], [29.7, 7098.0], [29.8, 7102.0], [29.9, 7103.0], [30.0, 7106.0], [30.1, 7107.0], [30.2, 7110.0], [30.3, 7111.0], [30.4, 7113.0], [30.5, 7114.0], [30.6, 7116.0], [30.7, 7117.0], [30.8, 7119.0], [30.9, 7122.0], [31.0, 7123.0], [31.1, 7126.0], [31.2, 7127.0], [31.3, 7128.0], [31.4, 7129.0], [31.5, 7130.0], [31.6, 7131.0], [31.7, 7132.0], [31.8, 7133.0], [31.9, 7133.0], [32.0, 7134.0], [32.1, 7134.0], [32.2, 7135.0], [32.3, 7138.0], [32.4, 7138.0], [32.5, 7139.0], [32.6, 7141.0], [32.7, 7142.0], [32.8, 7143.0], [32.9, 7144.0], [33.0, 7144.0], [33.1, 7146.0], [33.2, 7147.0], [33.3, 7148.0], [33.4, 7150.0], [33.5, 7151.0], [33.6, 7153.0], [33.7, 7154.0], [33.8, 7155.0], [33.9, 7155.0], [34.0, 7156.0], [34.1, 7157.0], [34.2, 7160.0], [34.3, 7163.0], [34.4, 7166.0], [34.5, 7166.0], [34.6, 7167.0], [34.7, 7168.0], [34.8, 7169.0], [34.9, 7169.0], [35.0, 7170.0], [35.1, 7171.0], [35.2, 7172.0], [35.3, 7173.0], [35.4, 7174.0], [35.5, 7175.0], [35.6, 7176.0], [35.7, 7177.0], [35.8, 7177.0], [35.9, 7178.0], [36.0, 7179.0], [36.1, 7180.0], [36.2, 7183.0], [36.3, 7187.0], [36.4, 7188.0], [36.5, 7189.0], [36.6, 7191.0], [36.7, 7193.0], [36.8, 7194.0], [36.9, 7195.0], [37.0, 7196.0], [37.1, 7197.0], [37.2, 7199.0], [37.3, 7199.0], [37.4, 7200.0], [37.5, 7201.0], [37.6, 7203.0], [37.7, 7204.0], [37.8, 7205.0], [37.9, 7206.0], [38.0, 7207.0], [38.1, 7207.0], [38.2, 7210.0], [38.3, 7211.0], [38.4, 7211.0], [38.5, 7212.0], [38.6, 7215.0], [38.7, 7215.0], [38.8, 7219.0], [38.9, 7221.0], [39.0, 7223.0], [39.1, 7224.0], [39.2, 7225.0], [39.3, 7226.0], [39.4, 7228.0], [39.5, 7229.0], [39.6, 7231.0], [39.7, 7232.0], [39.8, 7234.0], [39.9, 7234.0], [40.0, 7238.0], [40.1, 7239.0], [40.2, 7241.0], [40.3, 7242.0], [40.4, 7243.0], [40.5, 7245.0], [40.6, 7247.0], [40.7, 7249.0], [40.8, 7254.0], [40.9, 7255.0], [41.0, 7258.0], [41.1, 7258.0], [41.2, 7259.0], [41.3, 7261.0], [41.4, 7263.0], [41.5, 7264.0], [41.6, 7267.0], [41.7, 7267.0], [41.8, 7268.0], [41.9, 7270.0], [42.0, 7273.0], [42.1, 7275.0], [42.2, 7277.0], [42.3, 7279.0], [42.4, 7282.0], [42.5, 7282.0], [42.6, 7283.0], [42.7, 7284.0], [42.8, 7287.0], [42.9, 7288.0], [43.0, 7290.0], [43.1, 7291.0], [43.2, 7292.0], [43.3, 7294.0], [43.4, 7297.0], [43.5, 7298.0], [43.6, 7298.0], [43.7, 7299.0], [43.8, 7300.0], [43.9, 7301.0], [44.0, 7305.0], [44.1, 7307.0], [44.2, 7308.0], [44.3, 7310.0], [44.4, 7317.0], [44.5, 7318.0], [44.6, 7320.0], [44.7, 7321.0], [44.8, 7323.0], [44.9, 7324.0], [45.0, 7324.0], [45.1, 7326.0], [45.2, 7327.0], [45.3, 7328.0], [45.4, 7330.0], [45.5, 7332.0], [45.6, 7335.0], [45.7, 7337.0], [45.8, 7338.0], [45.9, 7339.0], [46.0, 7341.0], [46.1, 7343.0], [46.2, 7347.0], [46.3, 7348.0], [46.4, 7350.0], [46.5, 7353.0], [46.6, 7356.0], [46.7, 7358.0], [46.8, 7361.0], [46.9, 7365.0], [47.0, 7367.0], [47.1, 7372.0], [47.2, 7374.0], [47.3, 7374.0], [47.4, 7385.0], [47.5, 7386.0], [47.6, 7394.0], [47.7, 7395.0], [47.8, 7399.0], [47.9, 7400.0], [48.0, 7401.0], [48.1, 7402.0], [48.2, 7404.0], [48.3, 7406.0], [48.4, 7408.0], [48.5, 7411.0], [48.6, 7415.0], [48.7, 7415.0], [48.8, 7416.0], [48.9, 7419.0], [49.0, 7422.0], [49.1, 7422.0], [49.2, 7423.0], [49.3, 7424.0], [49.4, 7428.0], [49.5, 7432.0], [49.6, 7435.0], [49.7, 7436.0], [49.8, 7436.0], [49.9, 7439.0], [50.0, 7440.0], [50.1, 7441.0], [50.2, 7444.0], [50.3, 7445.0], [50.4, 7449.0], [50.5, 7451.0], [50.6, 7452.0], [50.7, 7453.0], [50.8, 7455.0], [50.9, 7457.0], [51.0, 7458.0], [51.1, 7459.0], [51.2, 7464.0], [51.3, 7465.0], [51.4, 7466.0], [51.5, 7469.0], [51.6, 7475.0], [51.7, 7477.0], [51.8, 7483.0], [51.9, 7486.0], [52.0, 7487.0], [52.1, 7488.0], [52.2, 7488.0], [52.3, 7490.0], [52.4, 7491.0], [52.5, 7495.0], [52.6, 7502.0], [52.7, 7506.0], [52.8, 7508.0], [52.9, 7509.0], [53.0, 7511.0], [53.1, 7514.0], [53.2, 7521.0], [53.3, 7524.0], [53.4, 7528.0], [53.5, 7530.0], [53.6, 7534.0], [53.7, 7538.0], [53.8, 7544.0], [53.9, 7546.0], [54.0, 7549.0], [54.1, 7554.0], [54.2, 7560.0], [54.3, 7561.0], [54.4, 7564.0], [54.5, 7571.0], [54.6, 7576.0], [54.7, 7582.0], [54.8, 7587.0], [54.9, 7589.0], [55.0, 7594.0], [55.1, 7595.0], [55.2, 7605.0], [55.3, 7606.0], [55.4, 7607.0], [55.5, 7609.0], [55.6, 7616.0], [55.7, 7617.0], [55.8, 7623.0], [55.9, 7625.0], [56.0, 7627.0], [56.1, 7632.0], [56.2, 7638.0], [56.3, 7641.0], [56.4, 7642.0], [56.5, 7643.0], [56.6, 7647.0], [56.7, 7650.0], [56.8, 7656.0], [56.9, 7664.0], [57.0, 7665.0], [57.1, 7667.0], [57.2, 7673.0], [57.3, 7674.0], [57.4, 7678.0], [57.5, 7680.0], [57.6, 7682.0], [57.7, 7686.0], [57.8, 7691.0], [57.9, 7691.0], [58.0, 7699.0], [58.1, 7702.0], [58.2, 7703.0], [58.3, 7707.0], [58.4, 7712.0], [58.5, 7719.0], [58.6, 7729.0], [58.7, 7732.0], [58.8, 7733.0], [58.9, 7735.0], [59.0, 7742.0], [59.1, 7746.0], [59.2, 7750.0], [59.3, 7764.0], [59.4, 7770.0], [59.5, 7774.0], [59.6, 7775.0], [59.7, 7779.0], [59.8, 7786.0], [59.9, 7800.0], [60.0, 7807.0], [60.1, 7811.0], [60.2, 7818.0], [60.3, 7819.0], [60.4, 7828.0], [60.5, 7832.0], [60.6, 7835.0], [60.7, 7838.0], [60.8, 7842.0], [60.9, 7845.0], [61.0, 7850.0], [61.1, 7852.0], [61.2, 7854.0], [61.3, 7855.0], [61.4, 7859.0], [61.5, 7863.0], [61.6, 7868.0], [61.7, 7871.0], [61.8, 7873.0], [61.9, 7874.0], [62.0, 7876.0], [62.1, 7877.0], [62.2, 7883.0], [62.3, 7885.0], [62.4, 7887.0], [62.5, 7889.0], [62.6, 7892.0], [62.7, 7894.0], [62.8, 7898.0], [62.9, 7899.0], [63.0, 7904.0], [63.1, 7906.0], [63.2, 7908.0], [63.3, 7909.0], [63.4, 7911.0], [63.5, 7913.0], [63.6, 7914.0], [63.7, 7915.0], [63.8, 7917.0], [63.9, 7921.0], [64.0, 7921.0], [64.1, 7923.0], [64.2, 7925.0], [64.3, 7926.0], [64.4, 7928.0], [64.5, 7933.0], [64.6, 7935.0], [64.7, 7937.0], [64.8, 7939.0], [64.9, 7940.0], [65.0, 7941.0], [65.1, 7942.0], [65.2, 7944.0], [65.3, 7946.0], [65.4, 7948.0], [65.5, 7950.0], [65.6, 7951.0], [65.7, 7953.0], [65.8, 7956.0], [65.9, 7958.0], [66.0, 7961.0], [66.1, 7961.0], [66.2, 7964.0], [66.3, 7966.0], [66.4, 7966.0], [66.5, 7967.0], [66.6, 7968.0], [66.7, 7969.0], [66.8, 7971.0], [66.9, 7972.0], [67.0, 7974.0], [67.1, 7975.0], [67.2, 7976.0], [67.3, 7979.0], [67.4, 7979.0], [67.5, 7980.0], [67.6, 7981.0], [67.7, 7982.0], [67.8, 7983.0], [67.9, 7984.0], [68.0, 7985.0], [68.1, 7987.0], [68.2, 7989.0], [68.3, 7990.0], [68.4, 7991.0], [68.5, 7992.0], [68.6, 7992.0], [68.7, 7993.0], [68.8, 7993.0], [68.9, 7994.0], [69.0, 7994.0], [69.1, 7996.0], [69.2, 7997.0], [69.3, 7997.0], [69.4, 7998.0], [69.5, 7999.0], [69.6, 8000.0], [69.7, 8002.0], [69.8, 8005.0], [69.9, 8007.0], [70.0, 8008.0], [70.1, 8008.0], [70.2, 8011.0], [70.3, 8012.0], [70.4, 8014.0], [70.5, 8014.0], [70.6, 8021.0], [70.7, 8023.0], [70.8, 8029.0], [70.9, 8033.0], [71.0, 8034.0], [71.1, 8035.0], [71.2, 8040.0], [71.3, 8042.0], [71.4, 8053.0], [71.5, 8054.0], [71.6, 8064.0], [71.7, 8072.0], [71.8, 8081.0], [71.9, 8083.0], [72.0, 8091.0], [72.1, 8098.0], [72.2, 8101.0], [72.3, 8102.0], [72.4, 8106.0], [72.5, 8107.0], [72.6, 8113.0], [72.7, 8115.0], [72.8, 8123.0], [72.9, 8124.0], [73.0, 8134.0], [73.1, 8138.0], [73.2, 8144.0], [73.3, 8145.0], [73.4, 8153.0], [73.5, 8155.0], [73.6, 8161.0], [73.7, 8168.0], [73.8, 8175.0], [73.9, 8191.0], [74.0, 8192.0], [74.1, 8194.0], [74.2, 8198.0], [74.3, 8205.0], [74.4, 8212.0], [74.5, 8220.0], [74.6, 8222.0], [74.7, 8226.0], [74.8, 8234.0], [74.9, 8235.0], [75.0, 8239.0], [75.1, 8242.0], [75.2, 8251.0], [75.3, 8251.0], [75.4, 8261.0], [75.5, 8264.0], [75.6, 8266.0], [75.7, 8269.0], [75.8, 8272.0], [75.9, 8279.0], [76.0, 8282.0], [76.1, 8287.0], [76.2, 8292.0], [76.3, 8307.0], [76.4, 8312.0], [76.5, 8317.0], [76.6, 8328.0], [76.7, 8329.0], [76.8, 8335.0], [76.9, 8336.0], [77.0, 8345.0], [77.1, 8349.0], [77.2, 8357.0], [77.3, 8366.0], [77.4, 8375.0], [77.5, 8382.0], [77.6, 8393.0], [77.7, 8394.0], [77.8, 8401.0], [77.9, 8402.0], [78.0, 8411.0], [78.1, 8413.0], [78.2, 8415.0], [78.3, 8416.0], [78.4, 8420.0], [78.5, 8430.0], [78.6, 8434.0], [78.7, 8443.0], [78.8, 8447.0], [78.9, 8454.0], [79.0, 8456.0], [79.1, 8468.0], [79.2, 8474.0], [79.3, 8485.0], [79.4, 8489.0], [79.5, 8494.0], [79.6, 8495.0], [79.7, 8507.0], [79.8, 8509.0], [79.9, 8517.0], [80.0, 8518.0], [80.1, 8528.0], [80.2, 8529.0], [80.3, 8533.0], [80.4, 8539.0], [80.5, 8540.0], [80.6, 8543.0], [80.7, 8546.0], [80.8, 8548.0], [80.9, 8557.0], [81.0, 8558.0], [81.1, 8560.0], [81.2, 8563.0], [81.3, 8565.0], [81.4, 8568.0], [81.5, 8575.0], [81.6, 8578.0], [81.7, 8585.0], [81.8, 8587.0], [81.9, 8593.0], [82.0, 8595.0], [82.1, 8598.0], [82.2, 8600.0], [82.3, 8603.0], [82.4, 8606.0], [82.5, 8608.0], [82.6, 8610.0], [82.7, 8612.0], [82.8, 8614.0], [82.9, 8619.0], [83.0, 8621.0], [83.1, 8623.0], [83.2, 8626.0], [83.3, 8627.0], [83.4, 8628.0], [83.5, 8633.0], [83.6, 8634.0], [83.7, 8636.0], [83.8, 8639.0], [83.9, 8640.0], [84.0, 8642.0], [84.1, 8643.0], [84.2, 8644.0], [84.3, 8653.0], [84.4, 8653.0], [84.5, 8657.0], [84.6, 8658.0], [84.7, 8659.0], [84.8, 8660.0], [84.9, 8661.0], [85.0, 8664.0], [85.1, 8666.0], [85.2, 8670.0], [85.3, 8677.0], [85.4, 8678.0], [85.5, 8683.0], [85.6, 8693.0], [85.7, 8699.0], [85.8, 8713.0], [85.9, 8724.0], [86.0, 8730.0], [86.1, 8733.0], [86.2, 8734.0], [86.3, 8738.0], [86.4, 8748.0], [86.5, 8755.0], [86.6, 8757.0], [86.7, 8761.0], [86.8, 8762.0], [86.9, 8769.0], [87.0, 8777.0], [87.1, 8779.0], [87.2, 8784.0], [87.3, 8786.0], [87.4, 8786.0], [87.5, 8787.0], [87.6, 8788.0], [87.7, 8790.0], [87.8, 8797.0], [87.9, 8810.0], [88.0, 8815.0], [88.1, 8816.0], [88.2, 8817.0], [88.3, 8819.0], [88.4, 8820.0], [88.5, 8822.0], [88.6, 8824.0], [88.7, 8831.0], [88.8, 8832.0], [88.9, 8833.0], [89.0, 8835.0], [89.1, 8837.0], [89.2, 8840.0], [89.3, 8847.0], [89.4, 8849.0], [89.5, 8850.0], [89.6, 8851.0], [89.7, 8853.0], [89.8, 8856.0], [89.9, 8861.0], [90.0, 8863.0], [90.1, 8865.0], [90.2, 8868.0], [90.3, 8871.0], [90.4, 8874.0], [90.5, 8885.0], [90.6, 8886.0], [90.7, 8893.0], [90.8, 8894.0], [90.9, 8898.0], [91.0, 8905.0], [91.1, 8912.0], [91.2, 8912.0], [91.3, 8922.0], [91.4, 8924.0], [91.5, 8927.0], [91.6, 8930.0], [91.7, 8936.0], [91.8, 8941.0], [91.9, 8951.0], [92.0, 8954.0], [92.1, 8954.0], [92.2, 8957.0], [92.3, 8959.0], [92.4, 8963.0], [92.5, 8971.0], [92.6, 8973.0], [92.7, 8974.0], [92.8, 8983.0], [92.9, 8987.0], [93.0, 8988.0], [93.1, 8993.0], [93.2, 8995.0], [93.3, 9021.0], [93.4, 9029.0], [93.5, 9041.0], [93.6, 9044.0], [93.7, 9047.0], [93.8, 9056.0], [93.9, 9064.0], [94.0, 9069.0], [94.1, 9071.0], [94.2, 9073.0], [94.3, 9085.0], [94.4, 9090.0], [94.5, 9092.0], [94.6, 9099.0], [94.7, 9106.0], [94.8, 9108.0], [94.9, 9110.0], [95.0, 9111.0], [95.1, 9115.0], [95.2, 9117.0], [95.3, 9120.0], [95.4, 9121.0], [95.5, 9131.0], [95.6, 9136.0], [95.7, 9139.0], [95.8, 9142.0], [95.9, 9147.0], [96.0, 9151.0], [96.1, 9152.0], [96.2, 9154.0], [96.3, 9162.0], [96.4, 9165.0], [96.5, 9173.0], [96.6, 9186.0], [96.7, 9196.0], [96.8, 9213.0], [96.9, 9224.0], [97.0, 9238.0], [97.1, 9273.0], [97.2, 9293.0], [97.3, 9312.0], [97.4, 9325.0], [97.5, 9337.0], [97.6, 9347.0], [97.7, 9397.0], [97.8, 9405.0], [97.9, 9447.0], [98.0, 9501.0], [98.1, 9551.0], [98.2, 9567.0], [98.3, 9627.0], [98.4, 9653.0], [98.5, 9668.0], [98.6, 9693.0], [98.7, 9730.0], [98.8, 9769.0], [98.9, 9807.0], [99.0, 9833.0], [99.1, 9879.0], [99.2, 9926.0], [99.3, 9973.0], [99.4, 10010.0], [99.5, 10063.0], [99.6, 10079.0], [99.7, 10140.0], [99.8, 10203.0], [99.9, 10989.0], [100.0, 11062.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 400.0, "maxY": 190.0, "series": [{"data": [[600.0, 1.0], [1500.0, 1.0], [1700.0, 2.0], [1800.0, 1.0], [2100.0, 1.0], [2200.0, 1.0], [2300.0, 2.0], [2400.0, 2.0], [2500.0, 3.0], [2600.0, 3.0], [2700.0, 1.0], [2800.0, 4.0], [2900.0, 2.0], [3000.0, 5.0], [3100.0, 2.0], [3200.0, 4.0], [3300.0, 4.0], [3400.0, 4.0], [3500.0, 2.0], [3600.0, 3.0], [3700.0, 3.0], [3800.0, 5.0], [3900.0, 3.0], [4000.0, 7.0], [4100.0, 6.0], [4200.0, 3.0], [4300.0, 6.0], [4400.0, 5.0], [4500.0, 6.0], [4600.0, 7.0], [4700.0, 5.0], [4800.0, 8.0], [4900.0, 8.0], [5000.0, 7.0], [5100.0, 4.0], [5200.0, 7.0], [5300.0, 5.0], [5400.0, 3.0], [5500.0, 5.0], [5600.0, 11.0], [5700.0, 6.0], [5800.0, 7.0], [5900.0, 4.0], [6000.0, 8.0], [6100.0, 3.0], [6200.0, 8.0], [6300.0, 9.0], [6400.0, 8.0], [6500.0, 20.0], [6600.0, 48.0], [6700.0, 67.0], [6900.0, 109.0], [6800.0, 141.0], [7000.0, 141.0], [7100.0, 190.0], [7200.0, 160.0], [7300.0, 104.0], [7400.0, 118.0], [7600.0, 73.0], [7500.0, 63.0], [7700.0, 46.0], [7800.0, 76.0], [7900.0, 167.0], [8000.0, 64.0], [8100.0, 52.0], [8300.0, 38.0], [8400.0, 46.0], [8200.0, 50.0], [8500.0, 63.0], [8600.0, 90.0], [8700.0, 52.0], [8900.0, 57.0], [8800.0, 79.0], [9000.0, 35.0], [9100.0, 52.0], [9200.0, 13.0], [9500.0, 8.0], [9600.0, 10.0], [9300.0, 12.0], [9400.0, 6.0], [9700.0, 4.0], [9800.0, 8.0], [9900.0, 5.0], [10000.0, 6.0], [10100.0, 4.0], [10200.0, 1.0], [10400.0, 1.0], [10900.0, 2.0], [10800.0, 1.0], [11000.0, 1.0], [400.0, 1.0], [500.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 11000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2497.0, "series": [{"data": [[0.0, 1.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2497.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 421.5427631578957, "minX": 1.6419126E12, "maxY": 499.42307692307685, "series": [{"data": [[1.6419126E12, 499.42307692307685], [1.64191266E12, 421.5427631578957]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64191266E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3601.5, "minX": 1.0, "maxY": 8326.0, "series": [{"data": [[2.0, 7117.0], [3.0, 7141.0], [4.0, 7142.0], [5.0, 7178.0], [6.0, 7176.0], [7.0, 7114.0], [8.0, 7248.0], [9.0, 7196.0], [10.0, 7275.0], [11.0, 7242.0], [12.0, 7194.0], [13.0, 7084.0], [14.0, 7083.0], [15.0, 7254.0], [16.0, 7271.0], [17.0, 7265.0], [18.0, 7138.0], [19.0, 7080.0], [20.0, 7192.0], [21.0, 7169.0], [22.0, 7168.0], [23.0, 7179.0], [24.0, 7179.0], [25.0, 6981.0], [26.0, 7028.0], [27.0, 7144.0], [28.0, 7180.0], [29.0, 7199.0], [30.0, 7108.0], [31.0, 7110.0], [33.0, 7229.0], [32.0, 7223.0], [35.0, 7228.0], [34.0, 7138.0], [37.0, 7066.0], [36.0, 7193.0], [39.0, 7205.0], [38.0, 7085.0], [41.0, 7225.0], [40.0, 7205.0], [43.0, 7170.0], [42.0, 7119.0], [45.0, 7282.0], [44.0, 7284.0], [47.0, 7264.0], [46.0, 7230.0], [49.0, 7107.0], [48.0, 7265.0], [51.0, 7211.0], [50.0, 7104.0], [53.0, 7226.0], [52.0, 7223.0], [55.0, 7225.0], [54.0, 7225.0], [57.0, 7253.0], [56.0, 7235.0], [59.0, 7234.0], [58.0, 7215.0], [61.0, 7259.0], [60.0, 7233.0], [63.0, 7241.0], [62.0, 7209.0], [67.0, 7267.0], [66.0, 7215.0], [65.0, 7292.0], [64.0, 7295.0], [71.0, 7324.0], [70.0, 7135.0], [69.0, 7118.0], [68.0, 7310.0], [75.0, 7188.0], [74.0, 7170.0], [73.0, 7328.0], [72.0, 7398.0], [79.0, 7231.0], [78.0, 7298.0], [77.0, 7135.0], [76.0, 7189.0], [83.0, 7071.0], [82.0, 7279.0], [81.0, 7317.0], [80.0, 7282.0], [87.0, 7236.0], [86.0, 7239.0], [85.0, 7399.0], [84.0, 7157.0], [91.0, 7324.0], [90.0, 7323.0], [89.0, 7413.0], [88.0, 7238.0], [95.0, 7122.0], [94.0, 7212.0], [93.0, 7307.0], [92.0, 7401.0], [99.0, 7203.0], [98.0, 7359.0], [97.0, 7338.0], [96.0, 7146.0], [103.0, 7339.0], [102.0, 7294.0], [101.0, 7457.0], [100.0, 7267.0], [107.0, 7409.0], [106.0, 7247.0], [105.0, 7189.0], [104.0, 7318.0], [111.0, 7310.0], [110.0, 7291.0], [109.0, 7420.0], [108.0, 7456.0], [115.0, 7276.0], [114.0, 7284.0], [113.0, 7174.0], [112.0, 7221.0], [119.0, 7394.0], [118.0, 7341.0], [117.0, 7324.0], [116.0, 7464.0], [123.0, 7301.0], [122.0, 7521.0], [121.0, 7308.0], [120.0, 7290.0], [127.0, 7297.0], [126.0, 7297.0], [125.0, 7374.0], [124.0, 7411.0], [135.0, 7332.0], [134.0, 7386.0], [133.0, 7435.0], [132.0, 7300.0], [131.0, 7283.0], [130.0, 7323.0], [129.0, 7436.0], [128.0, 7510.0], [143.0, 7428.0], [142.0, 7469.0], [141.0, 7298.0], [140.0, 7333.0], [139.0, 7422.0], [138.0, 7404.0], [137.0, 7477.0], [136.0, 7435.0], [151.0, 7399.0], [150.0, 7543.0], [149.0, 7367.0], [148.0, 7351.0], [147.0, 7436.0], [146.0, 7491.0], [145.0, 7331.0], [144.0, 7375.0], [159.0, 7439.0], [158.0, 7405.0], [157.0, 7495.0], [156.0, 7416.0], [155.0, 7422.0], [154.0, 7502.0], [153.0, 7419.0], [152.0, 7490.0], [167.0, 7442.0], [166.0, 7575.0], [165.0, 7511.0], [164.0, 7453.0], [163.0, 7508.0], [162.0, 7484.0], [161.0, 7466.0], [160.0, 7444.0], [175.0, 7488.0], [174.0, 7447.0], [173.0, 7498.0], [172.0, 7491.0], [171.0, 7422.0], [170.0, 7460.0], [169.0, 7432.0], [168.0, 7444.0], [183.0, 7649.0], [182.0, 7483.0], [181.0, 7610.0], [180.0, 7495.0], [179.0, 7489.0], [178.0, 7465.0], [177.0, 7449.0], [176.0, 7525.0], [191.0, 7832.0], [190.0, 7712.0], [189.0, 7807.0], [188.0, 7746.0], [187.0, 7742.0], [186.0, 7395.0], [185.0, 7534.0], [184.0, 7691.0], [199.0, 7765.0], [198.0, 7830.0], [197.0, 7766.0], [196.0, 7748.0], [195.0, 7681.0], [194.0, 7665.0], [193.0, 7723.0], [192.0, 7732.0], [207.0, 7841.0], [206.0, 7805.0], [205.0, 7889.0], [204.0, 7779.0], [203.0, 7908.0], [202.0, 7791.0], [201.0, 7786.0], [200.0, 7781.0], [215.0, 7910.0], [214.0, 7991.0], [213.0, 7956.0], [212.0, 7898.0], [211.0, 7853.0], [210.0, 7911.0], [209.0, 7993.0], [208.0, 7863.0], [223.0, 8191.0], [222.0, 8215.0], [221.0, 8220.0], [220.0, 8242.0], [219.0, 8153.0], [218.0, 8119.0], [217.0, 7969.0], [216.0, 7899.0], [231.0, 8239.0], [230.0, 8194.0], [229.0, 8144.0], [228.0, 8282.0], [227.0, 8235.0], [226.0, 8194.0], [225.0, 8198.0], [224.0, 8206.0], [239.0, 8272.0], [238.0, 8239.0], [237.0, 8312.0], [236.0, 8312.0], [235.0, 8262.0], [234.0, 8317.0], [233.0, 8253.0], [232.0, 8253.0], [247.0, 6512.0], [246.0, 6445.0], [245.0, 8280.0], [244.0, 8264.0], [243.0, 8276.0], [242.0, 8236.0], [241.0, 8222.0], [240.0, 8221.0], [255.0, 8326.0], [254.0, 6594.0], [253.0, 6589.0], [252.0, 8245.0], [251.0, 6533.0], [250.0, 8308.0], [249.0, 6573.0], [248.0, 6534.0], [270.0, 6700.0], [271.0, 6703.0], [269.0, 6658.0], [268.0, 6732.0], [267.0, 6664.0], [266.0, 6704.0], [265.0, 6643.0], [264.0, 8279.0], [263.0, 6703.0], [257.0, 6579.0], [256.0, 6617.0], [259.0, 6675.0], [258.0, 6599.0], [262.0, 8264.0], [261.0, 6697.0], [260.0, 6675.0], [275.0, 6732.0], [285.0, 6830.0], [286.0, 7962.0], [284.0, 6806.75], [280.0, 6749.0], [279.0, 6652.0], [278.0, 8064.0], [277.0, 6714.0], [276.0, 6752.0], [274.0, 6692.0], [273.0, 6735.0], [272.0, 6717.0], [302.0, 6809.0], [303.0, 6768.0], [301.0, 6915.0], [300.0, 6808.0], [299.0, 6726.0], [298.0, 6762.0], [297.0, 6848.0], [296.0, 6861.0], [295.0, 6791.0], [289.0, 6855.0], [288.0, 7396.0], [291.0, 6725.0], [290.0, 6875.0], [294.0, 6772.0], [293.0, 6726.0], [292.0, 6691.0], [318.0, 7381.0], [307.0, 3601.5], [306.0, 6886.0], [305.0, 6771.0], [304.0, 6804.0], [311.0, 6816.0], [310.0, 6884.0], [309.0, 7964.0], [308.0, 6834.0], [319.0, 6867.0], [317.0, 6862.0], [316.0, 7430.0], [315.0, 6810.0], [314.0, 6938.0], [313.0, 7973.0], [312.0, 6815.0], [334.0, 7427.5], [335.0, 7437.0], [333.0, 6959.0], [332.0, 7589.666666666667], [331.0, 7391.5], [330.0, 7426.0], [329.0, 7424.0], [328.0, 7425.5], [327.0, 6851.0], [321.0, 7436.5], [320.0, 7611.666666666667], [323.0, 7422.5], [322.0, 6855.0], [326.0, 7332.0], [325.0, 7582.0], [324.0, 7447.5], [350.0, 7456.5], [351.0, 7389.0], [349.0, 7426.0], [348.0, 7365.0], [347.0, 7371.5], [346.0, 7467.5], [345.0, 7396.0], [344.0, 7435.0], [343.0, 7357.0], [337.0, 7369.5], [336.0, 7611.333333333333], [339.0, 7604.0], [338.0, 7344.5], [342.0, 7466.5], [341.0, 7495.0], [340.0, 6813.0], [366.0, 7533.0], [367.0, 7522.0], [365.0, 7617.0], [364.0, 6873.0], [363.0, 7328.0], [362.0, 7056.0], [361.0, 7144.0], [360.0, 7512.0], [359.0, 7692.333333333333], [353.0, 7040.0], [352.0, 7421.0], [355.0, 7519.0], [354.0, 7685.666666666667], [358.0, 7364.5], [357.0, 7372.5], [356.0, 7533.0], [382.0, 7521.5], [374.0, 5172.333333333333], [373.0, 7476.5], [372.0, 7523.0], [375.0, 7541.0], [369.0, 6937.0], [368.0, 7483.5], [371.0, 7458.5], [370.0, 7624.0], [383.0, 7532.0], [381.0, 7714.333333333333], [380.0, 7488.5], [379.0, 7748.0], [378.0, 6992.0], [377.0, 7576.0], [376.0, 7662.0], [398.0, 7450.0], [399.0, 7433.0], [397.0, 7410.5], [396.0, 7503.0], [395.0, 7673.666666666667], [394.0, 7467.5], [393.0, 7628.666666666667], [392.0, 7569.5], [391.0, 6981.0], [385.0, 7613.5], [384.0, 6926.0], [387.0, 7497.5], [386.0, 7497.0], [390.0, 7609.0], [389.0, 7502.5], [388.0, 7636.666666666667], [414.0, 7527.0], [415.0, 7456.0], [413.0, 7407.0], [412.0, 7398.5], [411.0, 7601.333333333333], [410.0, 7502.0], [409.0, 7400.5], [408.0, 6858.0], [407.0, 7478.5], [401.0, 7520.5], [400.0, 7644.0], [403.0, 7812.714285714285], [402.0, 7469.5], [406.0, 7450.0], [405.0, 7701.5], [404.0, 7393.0], [430.0, 7512.0], [429.0, 3771.5], [431.0, 7532.333333333333], [428.0, 7645.666666666667], [427.0, 7449.5], [426.0, 7673.666666666667], [425.0, 6930.0], [424.0, 7425.0], [423.0, 7659.5], [417.0, 7487.5], [416.0, 7425.0], [419.0, 7397.5], [418.0, 7387.0], [422.0, 7011.0], [421.0, 6899.0], [420.0, 7396.0], [446.0, 7498.0], [447.0, 7521.0], [445.0, 7610.0], [444.0, 7517.0], [443.0, 6977.0], [442.0, 7557.333333333333], [441.0, 7334.5], [440.0, 7632.666666666667], [439.0, 7447.5], [433.0, 7630.0], [432.0, 7409.5], [435.0, 6841.0], [434.0, 6948.0], [438.0, 7573.333333333333], [437.0, 7886.0], [436.0, 7477.0], [462.0, 7442.5], [463.0, 7487.5], [461.0, 7430.0], [460.0, 7525.0], [459.0, 7625.0], [458.0, 7148.0], [457.0, 7496.0], [456.0, 7199.0], [455.0, 7510.0], [449.0, 7080.0], [448.0, 7535.0], [451.0, 7504.5], [450.0, 7651.0], [454.0, 7085.0], [453.0, 7516.0], [452.0, 7523.5], [478.0, 7003.0], [479.0, 7586.333333333333], [477.0, 7104.0], [476.0, 7635.333333333333], [475.0, 7477.0], [474.0, 7444.0], [473.0, 7421.0], [472.0, 7693.5], [471.0, 7596.333333333333], [465.0, 7584.333333333333], [464.0, 7098.0], [467.0, 7601.666666666667], [466.0, 7177.0], [470.0, 7506.0], [469.0, 7509.5], [468.0, 7467.5], [494.0, 6930.0], [495.0, 7721.6], [493.0, 6922.0], [492.0, 7488.0], [491.0, 6910.0], [490.0, 6980.0], [489.0, 7478.0], [488.0, 6890.0], [487.0, 7714.666666666667], [481.0, 7025.0], [480.0, 6971.0], [483.0, 7488.0], [482.0, 7641.0], [486.0, 6978.0], [485.0, 7505.0], [484.0, 7566.666666666667], [500.0, 7545.417948717953], [499.0, 7691.3376623376635], [498.0, 7306.533333333336], [497.0, 7498.333333333333], [496.0, 7775.857142857142], [1.0, 7087.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[442.6016000000004, 7492.314799999989]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9813.266666666666, "minX": 1.6419126E12, "maxY": 117788.6, "series": [{"data": [[1.6419126E12, 43620.73333333333], [1.64191266E12, 117788.6]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6419126E12, 9813.266666666666], [1.64191266E12, 26478.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64191266E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6929.581360946743, "minX": 1.6419126E12, "maxY": 7700.871710526302, "series": [{"data": [[1.6419126E12, 6929.581360946743], [1.64191266E12, 7700.871710526302]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64191266E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 6929.3949704142, "minX": 1.6419126E12, "maxY": 7700.804824561408, "series": [{"data": [[1.6419126E12, 6929.3949704142], [1.64191266E12, 7700.804824561408]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64191266E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6419126E12, "maxY": 140.2455621301774, "series": [{"data": [[1.6419126E12, 140.2455621301774], [1.64191266E12, 0.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64191266E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 407.0, "minX": 1.6419126E12, "maxY": 11062.0, "series": [{"data": [[1.6419126E12, 11062.0], [1.64191266E12, 9325.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6419126E12, 9302.6], [1.64191266E12, 8805.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6419126E12, 10169.12], [1.64191266E12, 9150.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6419126E12, 9703.65], [1.64191266E12, 8951.75]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6419126E12, 407.0], [1.64191266E12, 6445.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6419126E12, 7161.5], [1.64191266E12, 7526.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64191266E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 541.0, "minX": 2.0, "maxY": 8850.5, "series": [{"data": [[2.0, 1643.0], [33.0, 7712.0], [40.0, 7849.0], [41.0, 7435.0], [47.0, 6984.0], [3.0, 541.0], [48.0, 7162.5], [51.0, 4323.0], [50.0, 7264.5], [53.0, 7688.5], [52.0, 7734.5], [54.0, 5154.5], [56.0, 7363.5], [58.0, 7412.0], [61.0, 7014.0], [62.0, 8123.0], [64.0, 7170.0], [66.0, 8680.5], [70.0, 8043.5], [69.0, 8850.5], [72.0, 7776.5], [76.0, 7851.5], [79.0, 8532.0], [81.0, 7475.5], [82.0, 7910.5], [84.0, 8370.5], [90.0, 7538.5], [15.0, 2489.0], [31.0, 7169.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 90.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 541.0, "minX": 2.0, "maxY": 8850.5, "series": [{"data": [[2.0, 1643.0], [33.0, 7712.0], [40.0, 7849.0], [41.0, 7435.0], [47.0, 6984.0], [3.0, 541.0], [48.0, 7162.5], [51.0, 4323.0], [50.0, 7264.5], [53.0, 7688.5], [52.0, 7734.5], [54.0, 5154.0], [56.0, 7363.5], [58.0, 7412.0], [61.0, 7014.0], [62.0, 8123.0], [64.0, 7169.5], [66.0, 8680.5], [70.0, 8043.5], [69.0, 8850.5], [72.0, 7776.5], [76.0, 7851.5], [79.0, 8532.0], [81.0, 7475.5], [82.0, 7910.5], [84.0, 8370.5], [90.0, 7538.5], [15.0, 2489.0], [31.0, 7169.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 90.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 19.6, "minX": 1.6419126E12, "maxY": 22.066666666666666, "series": [{"data": [[1.6419126E12, 19.6], [1.64191266E12, 22.066666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64191266E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 11.266666666666667, "minX": 1.6419126E12, "maxY": 30.4, "series": [{"data": [[1.6419126E12, 11.266666666666667], [1.64191266E12, 30.4]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64191266E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 11.266666666666667, "minX": 1.6419126E12, "maxY": 30.4, "series": [{"data": [[1.6419126E12, 11.266666666666667], [1.64191266E12, 30.4]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64191266E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 11.266666666666667, "minX": 1.6419126E12, "maxY": 30.4, "series": [{"data": [[1.6419126E12, 11.266666666666667], [1.64191266E12, 30.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64191266E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

